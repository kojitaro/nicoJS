// Generated by CoffeeScript 1.12.7
(function() {
  var e, nicoJS;

  nicoJS = (function() {
    function nicoJS(params) {
      this.version = '1.1.8';
      this.timer = null;
      this.interval = null;
      this.fps = 1000 / 30;
      this.step = 2 * 1000;
      this.comments = [];
      this.app = params.app;
      this.font_size = params.font_size || 50;
      this.color = params.color || '#fff';
      this.width = params.width || 500;
      this.height = params.height || 300;
      this.textShadow = params.textShadow || '0 0 5px #111';
      this.render();
    }

    nicoJS.prototype.render = function() {
      this.app.style.whiteSpace = 'nowrap';
      this.app.style.overflow = 'hidden';
      this.app.style.position = 'relative';
      this.app.style.width = this.width + 'px';
      this.app.style.height = this.height + 'px';
      console.log('nicoJS@' + this.version);
      console.log(' ├─ author     : yuki540');
      console.log(' ├─ homepage   : http://yuki540.com');
      return console.log(' └─ repository : https://github.com/yuki540net/nicoJS');
    };

    nicoJS.prototype.resize = function(width, height) {
      this.width = width;
      this.height = height;
      this.app.style.width = this.width + 'px';
      return this.app.style.height = this.height + 'px';
    };

    nicoJS.prototype.send = function(text, color, font_size) {
      var ele, x, y;
      font_size = font_size || this.font_size;
      color = color || this.color;
      text = text || '';
      x = this.width;
      y = Math.random() * (this.height - this.font_size);
      ele = document.createElement('div');
      ele.innerHTML = text;
      ele.style.position = 'absolute';
      ele.style.left = x + 'px';
      ele.style.top = y + 'px';
      ele.style.fontSize = font_size + 'px';
      ele.style.textShadow = this.textShadow;
      ele.style.color = color;
      this.app.appendChild(ele);
      return this.comments.push({
        ele: ele,
        x: x,
        y: y
      });
    };

    nicoJS.prototype.flow = function() {
      var end, i, j, len, ref, results;
      len = this.comments.length;
      results = [];
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        end = this.comments[i].ele.getBoundingClientRect().width * -1;
        if (this.comments[i].x > end) {
          this.comments[i].x -= 4;
          results.push(this.comments[i].ele.style.left = this.comments[i].x + 'px');
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    nicoJS.prototype.listen = function() {
      this.stop();
      return this.timer = setInterval((function(_this) {
        return function() {
          return _this.flow();
        };
      })(this), this.fps);
    };

    nicoJS.prototype.loop = function(comments) {
      var i, len;
      i = 0;
      len = comments.length;
      this.listen();
      this.send(comments[i++]);
      return this.interval = setInterval((function(_this) {
        return function() {
          if (len < i) {
            i = 0;
          }
          return _this.send(comments[i++]);
        };
      })(this), this.step);
    };

    nicoJS.prototype.stop = function() {
      clearInterval(this.timer);
      return clearInterval(this.interval);
    };

    return nicoJS;

  })();

  try {
    module.exports = nicoJS;
  } catch (error) {
    e = error;
  }

}).call(this);
